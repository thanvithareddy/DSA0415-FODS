import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
# df = pd.read_csv('your_dataset.csv')

# Sample data creation for illustration purposes
np.random.seed(42)
df = pd.DataFrame({
    'size': np.random.randint(800, 4000, 100),
    'bedrooms': np.random.randint(1, 5, 100),
    'location': np.random.choice(['Location1', 'Location2', 'Location3'], 100),
    'price': np.random.randint(100000, 500000, 100)
})

# Checking for missing values
print(df.isnull().sum())

# Bivariate analysis: House size vs. House price
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='size', y='price')
plt.title('House Size vs. House Price')
plt.xlabel('House Size (sq ft)')
plt.ylabel('House Price ($)')
plt.show()

# Splitting the data into features (X) and target (y)
X = df[['size']]
y = df['price']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Building the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions on the test set
y_pred = model.predict(X_test)

# Evaluating the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error (MAE):", mae)
print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R2):", r2)

# Plotting the regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Prices')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted Prices')
plt.title('House Size vs. House Price (Regression Line)')
plt.xlabel('House Size (sq ft)')
plt.ylabel('House Price ($)')
plt.legend()
plt.show()

# Plotting residuals
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.title('Residuals Distribution')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.show()
