import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
# Assuming the dataset is named 'customer_data.csv'
# df = pd.read_csv('customer_data.csv')

# Sample data creation for illustration purposes
np.random.seed(42)
df = pd.DataFrame({
    'customer_id': range(1, 101),
    'age': np.random.randint(18, 70, 100),
    'annual_income': np.random.randint(30000, 150000, 100),
    'spending_score': np.random.randint(1, 100, 100),  # Spending score is a score assigned by the company based on customer behavior
    'online_hours': np.random.randint(1, 20, 100)  # Hours spent online per week
})

# Drop customer_id as it is not relevant for clustering
df.drop('customer_id', axis=1, inplace=True)

# Feature selection
features = ['age', 'annual_income', 'spending_score', 'online_hours']

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[features])

# Determine the optimal number of clusters using the Elbow Method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(scaled_features)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method to Determine Optimal Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS (Within-Cluster Sum of Squares)')
plt.show()

# Based on the elbow method, let's choose the optimal number of clusters (e.g., k=4)
optimal_clusters = 4
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
df['cluster'] = kmeans.fit_predict(scaled_features)

# Evaluate the clustering performance using silhouette score
sil_score = silhouette_score(scaled_features, df['cluster'])
print("Silhouette Score:", sil_score)

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='annual_income', y='spending_score', hue='cluster', palette='viridis', s=100)
plt.title('Customer Segments Based on Annual Income and Spending Score')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()
plt.show()

# Visualize cluster distribution
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='cluster', palette='viridis')
plt.title('Distribution of Customers in Clusters')
plt.xlabel('Cluster')
plt.ylabel('Number of Customers')
plt.show()

# Analysis of clusters
for i in range(optimal_clusters):
    cluster_data = df[df['cluster'] == i]
    print(f"Cluster {i} Statistics:")
    print(cluster_data.describe())
    print("\n")

# Save the clustered data
df.to_csv('clustered_customer_data.csv', index=False)
