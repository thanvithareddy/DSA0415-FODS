import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
# Assuming the dataset is named 'treatment_data.csv'
# df = pd.read_csv('treatment_data.csv')

# Sample data creation for illustration purposes
np.random.seed(42)
df = pd.DataFrame({
    'age': np.random.randint(20, 80, 100),
    'gender': np.random.choice(['Male', 'Female'], 100),
    'blood_pressure': np.random.randint(80, 180, 100),
    'cholesterol': np.random.randint(150, 300, 100),
    'outcome': np.random.choice(['Good', 'Bad'], 100)
})

# Encode categorical variables (if any)
df['gender'] = df['gender'].map({'Male': 0, 'Female': 1})
df['outcome'] = df['outcome'].map({'Good': 1, 'Bad': 0})

# Splitting the data into features (X) and target (y)
X = df.drop('outcome', axis=1)
y = df['outcome']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardizing the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Building the KNN model
knn = KNeighborsClassifier(n_neighbors=5)  # You can choose a different number of neighbors
knn.fit(X_train, y_train)

# Making predictions on the test set
y_pred = knn.predict(X_test)

# Evaluating the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-Score:", f1)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Bad', 'Good'], yticklabels=['Bad', 'Good'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
