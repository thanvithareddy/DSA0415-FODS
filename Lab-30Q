from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Load the Iris dataset
iris = load_iris()

# Splitting the data into features (X) and target (y)
X = iris.data
y = iris.target

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Building and training the Decision Tree classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Function to get user input for new flower features
def get_user_input():
    sepal_length = float(input("Enter the sepal length (cm) of the new flower: "))
    sepal_width = float(input("Enter the sepal width (cm) of the new flower: "))
    petal_length = float(input("Enter the petal length (cm) of the new flower: "))
    petal_width = float(input("Enter the petal width (cm) of the new flower: "))
    
    new_flower = [[sepal_length, sepal_width, petal_length, petal_width]]
    
    return new_flower

# Get user input
new_flower = get_user_input()

# Making a prediction for the new flower
prediction = clf.predict(new_flower)

# Mapping numerical target back to original labels
species = iris.target_names[prediction]

print(f"The predicted species of the new flower is: {species[0]}")
