import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Step 1: Simulated transaction data for multiple stores
data = {
    'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
    'TotalSpent': [500, 150, 2000, 350, 3000, 700, 1200, 400, 800, 1000, 2200, 1700, 900, 1600, 1800, 1300],
    'VisitFrequency': [5, 3, 15, 7, 20, 8, 12, 5, 10, 12, 18, 11, 8, 13, 15, 10]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Step 2: Data Preprocessing
# No missing values to handle in this simulated data

# Normalize the data
scaler = StandardScaler()
df[['TotalSpent', 'VisitFrequency']] = scaler.fit_transform(df[['TotalSpent', 'VisitFrequency']])

# Step 3: Determine the optimal number of clusters using Elbow Method and Silhouette Analysis
sse = []
silhouette_scores = []
K_range = range(1, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df[['TotalSpent', 'VisitFrequency']])
    sse.append(kmeans.inertia_)
    if k > 1:
        score = silhouette_score(df[['TotalSpent', 'VisitFrequency']], kmeans.labels_)
        silhouette_scores.append(score)

# Plot Elbow Method
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.plot(K_range, sse, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('SSE')

# Plot Silhouette Analysis
plt.subplot(1, 2, 2)
plt.plot(range(2, 11), silhouette_scores, marker='o')
plt.title('Silhouette Analysis')
plt.xlabel('Number of clusters')
plt.ylabel('Silhouette Score')

plt.tight_layout()
plt.show()

# Step 4: Apply K-Means Clustering with the optimal number of clusters (e.g., 3)
optimal_clusters = 3
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(df[['TotalSpent', 'VisitFrequency']])

# Step 5: Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x='TotalSpent', y='VisitFrequency', hue='Cluster', data=df, palette='Set2', s=100, alpha=0.8)
plt.title('Customer Segments Based on Spending and Visit Frequency')
plt.xlabel('Total Spent (Standardized)')
plt.ylabel('Visit Frequency (Standardized)')
plt.legend(title='Cluster')
plt.show()

# Step 6: Print the cluster centers (de-normalize to get original values)
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
print("Cluster Centers (Original Scale):")
print(cluster_centers)
